Okay, this is frustrating! If the URI https://b1518f9f-8980-4a58-b73b-3dd813ffa3f5-00-ee9n49p8ejxm.picard.replit.dev/ is definitely correct and listed exactly like that (including https:// and the trailing /) in your Intuit Developer Dashboard's Redirect URIs, let's try the debugging steps outlined previously.

Step 1: Add Detailed Logging

Let's add logging to see the exact redirect_uri value your code is generating and sending at both stages of the OAuth flow.

Modify your app.py like this:

# app.py

import logging # Add at the top if not already there
import os      # Add if not already there
import requests
import time
import base64
import traceback
import database
from intuitlib.client import AuthClient # Make sure these are imported
from intuitlib.enums import Scopes
from urllib.parse import urlparse, parse_qs, urlencode
import uuid

# Configure logging
# You might already have this via run.py, but being explicit can help
logger = logging.getLogger('app_oauth')
logger.setLevel(logging.INFO)
# If running directly without run.py's config, add a handler:
# if not logger.hasHandlers():
#     handler = logging.StreamHandler()
#     formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
#     handler.setFormatter(formatter)
#     logger.addHandler(handler)

token_logger = logging.getLogger('qb_token_exchange') # Keep this separate if you like
token_logger.setLevel(logging.INFO)

# --- Modify get_quickbooks_auth_url ---
def get_quickbooks_auth_url():
    """Generate QuickBooks authorization URL with direct callback to our Streamlit app"""
    logger.info("=== GENERATING QUICKBOOKS AUTH URL ===") # Use logger
    try:
        qb_settings = database.get_quickbooks_settings()
        client_id = qb_settings.get('QB_CLIENT_ID', {}).get('value', '')
        client_secret = qb_settings.get('QB_CLIENT_SECRET', {}).get('value', '')
        environment = qb_settings.get('QB_ENVIRONMENT', {}).get('value', 'sandbox')

        if not client_id or not client_secret:
            error_msg = "Missing QuickBooks client credentials."
            logger.error(error_msg) # Use logger
            st.error(error_msg)
            return None

        # --- Redirect URI Calculation and Logging ---
        replit_domain = os.environ.get("REPLIT_DOMAINS", "")
        if replit_domain:
            replit_domain = replit_domain.split(',')[0].strip()
            redirect_uri = f"https://{replit_domain}/" # Base URL
            # *** ADDED DETAILED LOGGING ***
            logger.info(f"REPLIT_DOMAINS env var found: '{replit_domain}'")
            logger.info(f"[Auth URL Gen] Calculated redirect_uri: '{redirect_uri}'")
        else:
            redirect_uri = "http://localhost:5000/" # Base URL for local
            logger.warning(f"[Auth URL Gen] REPLIT_DOMAINS not found. Using fallback redirect_uri: '{redirect_uri}'")
        # --- End Redirect URI Calculation ---

        # database.update_setting("quickbooks_settings", "QB_REDIRECT_URI", redirect_uri) # Might not be needed

        auth_client = AuthClient(
            client_id=client_id,
            client_secret=client_secret,
            redirect_uri=redirect_uri, # Use the calculated base app URL
            environment=environment
        )
        # *** ADDED DETAILED LOGGING ***
        logger.info(f"[Auth URL Gen] AuthClient initialized with redirect_uri: '{auth_client.redirect_uri}'")

        scopes = [Scopes.ACCOUNTING, Scopes.OPENID]
        state = f"{str(uuid.uuid4())}_{int(time.time())}"
        logger.info(f"[Auth URL Gen] Generated state parameter: {state[:8]}...")

        auth_url_base = auth_client.get_authorization_url(scopes) # Get base URL first
        # *** ADDED DETAILED LOGGING ***
        logger.info(f"[Auth URL Gen] Base URL from AuthClient.get_authorization_url(): '{auth_url_base}'")

        # Manually add state and ensure redirect_uri is correct in the final URL
        parsed_url = urlparse(auth_url_base)
        params = parse_qs(parsed_url.query)
        params['state'] = [state]
        # Explicitly check/set the redirect_uri param before encoding
        params['redirect_uri'] = [redirect_uri] # Ensure it uses our calculated one
        query_string = urlencode(params, doseq=True)
        final_auth_url = parsed_url._replace(query=query_string).geturl()

        # *** ADDED DETAILED LOGGING ***
        logger.info(f"[Auth URL Gen] Final Auth URL Query Params: {params}")
        logger.info(f"[Auth URL Gen] Final Auth URL (first 200 chars): {final_auth_url[:200]}")
        logger.info("=== END OF QUICKBOOKS AUTH URL GENERATION ===")

        return final_auth_url

    except ImportError as imp_err:
        error_msg = f"Failed to import QuickBooks libraries: {str(imp_err)}"
        logger.error(error_msg) # Use logger
        st.error(error_msg)
        return None
    except Exception as e:
        error_msg = f"Error generating QuickBooks auth URL: {str(e)}"
        logger.error(error_msg, exc_info=True) # Log traceback
        st.error(f"Error connecting to QuickBooks: {str(e)}")
        return None

# --- Modify direct_token_exchange ---
def direct_token_exchange(code, realm_id):
    """Exchange authorization code for tokens using direct API call"""
    token_logger.info(f"Starting direct token exchange for realm {realm_id} with code {code[:5]}...")
    try:
        qb_settings = database.get_quickbooks_settings()
        client_id = qb_settings.get('QB_CLIENT_ID', {}).get('value', '')
        client_secret = qb_settings.get('QB_CLIENT_SECRET', {}).get('value', '')
        environment = qb_settings.get('QB_ENVIRONMENT', {}).get('value', 'sandbox')

        # --- Redirect URI Calculation and Logging ---
        replit_domain = os.environ.get("REPLIT_DOMAINS", "")
        if replit_domain:
            replit_domain = replit_domain.split(',')[0].strip()
            redirect_uri = f"https://{replit_domain}/" # Base URL
            # *** ADDED DETAILED LOGGING ***
            token_logger.info(f"REPLIT_DOMAINS env var found: '{replit_domain}'")
            token_logger.info(f"[Token Exchange] Calculated redirect_uri: '{redirect_uri}'")
        else:
            redirect_uri = "http://localhost:5000/"
            token_logger.warning(f"[Token Exchange] REPLIT_DOMAINS not found. Using fallback redirect_uri: '{redirect_uri}'")
        # --- End Redirect URI Calculation ---

        token_logger.info(f"[Token Exchange] Using client_id: {client_id[:5]}...")
        token_logger.info(f"[Token Exchange] Realm ID: {realm_id}")
        token_logger.info(f"[Token Exchange] Environment: {environment}")

        token_endpoint = "https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer"
        token_logger.info(f"[Token Exchange] Making token exchange request to: {token_endpoint}")

        data = {
            'grant_type': 'authorization_code',
            'code': code,
            'redirect_uri': redirect_uri # Use the calculated base app URL
        }
        # *** ADDED DETAILED LOGGING ***
        token_logger.info(f"[Token Exchange] Data payload for token exchange: {data}") # Log the whole payload

        auth_header = base64.b64encode(f"{client_id}:{client_secret}".encode()).decode()
        headers = {
            'Authorization': f'Basic {auth_header}',
            'Accept': 'application/json',
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        # *** ADDED DETAILED LOGGING ***
        token_logger.info(f"[Token Exchange] Request Headers: {headers}")

        response = requests.post(token_endpoint, data=data, headers=headers)

        # ... (rest of the function including response handling) ...

    # ... (exception handling) ...
content_copy
download
Use code with caution.
Python
Step 2: Restart and Test

Apply Changes: Make the code modifications above in your app.py.
Restart: Stop and restart your Replit app (run.py).
Clear Cache: Clear your browser cache for the app's domain again.
Attempt Connect: Go to Admin -> QuickBooks -> "Connect to QuickBooks".
Observe Logs VERY Carefully: Watch the Replit console logs. Look specifically for lines starting with:
[Auth URL Gen] Calculated redirect_uri:
[Auth URL Gen] AuthClient initialized with redirect_uri:
[Auth URL Gen] Final Auth URL (first 200 chars): (Mentally URL-decode the redirect_uri= part if you can read it).
(After redirect back, if it happens) [Token Exchange] Calculated redirect_uri:
[Token Exchange] Data payload for token exchange:
Copy/Paste the Logged URIs: Please copy the exact string that appears within the single quotes '...' for the lines:
[Auth URL Gen] Calculated redirect_uri:
[Token Exchange] Calculated redirect_uri:
Copy/Paste Dashboard URI: Please copy the exact string you have in the Intuit Developer Dashboard's Redirect URIs section.
Let's meticulously compare these three strings. There must be a difference if Intuit is giving that error.
